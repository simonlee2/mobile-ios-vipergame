# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

INFO_PLIST_MEMORY = '../Memory/Info.plist'
INFO_PLIST_MEMORY_BETA = '../Memory/MemoryBeta_Info.plist'
API_TOKEN = '3cb04e2fbf10fe15ed7a36a6b65599444e4f362d'
BUILD_SECRET = '8b3c7d5a15cc235e0d1d5a324e0f82bca9cd2ab3637833181169a2d190adcebf'
TAG = ENV['tag']

# Fastlane will automatically update itself
# update_fastlane

default_platform(:ios)

# Implementation lanes.
platform :ios do

###############################################################################
# App Variables
###############################################################################
  IDENTIFIER = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  TEAM_NAME = CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_name)
  TEAM_ID = CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_id)
  APPLE_ID = CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)
  scheme = "Memory" # Schema of the main app
  xcworkspace = "Memory.xcworkspace" # xCode Project name
  test_devices = ["iPhone X", "iPad Pro (12.9-inch) (2nd generation)"]
  setup_travis

  private_lane :simulators_for_testing do |options|
    required_os = options[:required_os] || ["9", "10", "11"]
  
    group_by_os = lambda { |simulators, os_list| 
      result = []
      os_list.each { |os|
        simulators_of_such_os = []
        simulators.each { |simulator|
          simulator_os = simulator.match(/.+\((\d+)\.[\d\.]+\).+/)[1]
          if simulator_os == os
            simulators_of_such_os << simulator
          end
        }
        result << simulators_of_such_os
      }
      result
    }
  
    devices = `instruments -s`.split("\n")
  
    simulators = devices.select { |device| device.strip.match(/\(Simulator\)\z/) }
  
    ipad_simulators = simulators.select { |simulator| simulator.include?('iPad') }
    iphone_simulators = simulators.select { |simulator| simulator.include?('iPhone') }
    iphone_simulators_by_os = group_by_os.(iphone_simulators, required_os)
    iphone_simulators_to_test = iphone_simulators_by_os.collect{ |simulators| simulators.last }.compact
  
    puts "Picked iPhone simulators for iOS Versions #{required_os} :"
    iphone_simulators_to_test.each { |s| puts s }
    test_iphone_names = iphone_simulators_to_test.map { |simulator_info| simulator_id = simulator_info.match(/(.+)\[[\w-]+\].+/)[1].strip } 
  end

###############################################################################
# - Tests
###############################################################################
  desc "This Lane run tests in most important devices."
  lane :test do
    # This will check that the UI and Unit test are working.
    devices = simulators_for_testing(required_os: ["9", "10", "11"])

    run_tests(
      workspace: xcworkspace,
      devices: test_devices,
      scheme: scheme,
      devices: devices
      )
  end

###############################################################################
# - Memory crashlytics
###############################################################################
  desc "This lane will upload app to crashlytics."
  lane :memory do
    # Deliver to fabric
    version = get_version_number(target: 'Memory')
    fabric(
      version: version,
      info_plist: INFO_PLIST_MEMORY,
      scheme: 'Memory',
    )
  end

###############################################################################
# - MemoryBeta crashlytics
###############################################################################
  desc "This lane will upload app to crashlytics."
  lane :memory_beta do
    # Deliver to fabric
    version = get_version_number(target: 'MemoryBeta')
    fabric(
      version: version,
      info_plist: INFO_PLIST_MEMORY_BETA,
      scheme: 'MemoryBeta',
    )
  end

  lane :fabric do |options|
    match(
      type: "adhoc",
      shallow_clone: true
      )
    match(
      type: "development",
      shallow_clone: true
      )

    build_app(
      scheme: options[:scheme],
      export_method: "ad-hoc",
      
    )

    crashlytics(
      api_token: API_TOKEN,
      build_secret: BUILD_SECRET
    )
  end
end
